import { strategyGrid } from '@sudoku/stores/grid';
import { strategyManager } from '@sudoku/strategy/strategyManager'
import {get, writable} from 'svelte/store';

function CreateBranchBackManager() {
  const branchBackTimeSteps = [];
  const branchBackTimes = writable(0);

  return {
    getBranchBackTimes: () => branchBackTimes,

    addBranchBackTimeStep: (timeStep) => {
      branchBackTimeSteps.push(timeStep);
    },

    branchBackToLastBranchTimeStep: () => {
      strategyGrid.setTimeStep(branchBackTimeSteps[get(branchBackTimes) - 1]);
      strategyGrid.getStrategyGrid().update($strategyGrid => {
        $strategyGrid.map(row =>
            row.map(cell =>
                cell.branchBack(branchBackTimeSteps[get(branchBackTimes) - 1])));

        return $strategyGrid;
      })

      strategyManager.getIsUsingStrategy().set(true);
      branchBackTimes.update(val => val - 1);
    },

    branchBackToLastTimeStep: () => {
      strategyGrid.setTimeStep(get(strategyGrid.getTimeStep()) - 1);
      const branchBackTimeStep = get(strategyGrid.getTimeStep());

      strategyGrid.getStrategyGrid().update($strategyGrid => {
        $strategyGrid.map(row =>
            row.map(cell => cell.branchBack(branchBackTimeStep)));

        return $strategyGrid;
      })

      // Update branch back time steps
      if (branchBackTimeSteps.length > 0 && branchBackTimeStep <= branchBackTimeSteps[get(branchBackTimes) - 1]) {
        branchBackTimes.update(val => val - 1);
      } else if (branchBackTimeSteps.length > 0 && branchBackTimeStep === branchBackTimeSteps[branchBackTimeSteps.length - 1]) {
        strategyManager.getIsUsingStrategy().set(true);
      }
    }
  }
}

export const branchBackManager = CreateBranchBackManager();