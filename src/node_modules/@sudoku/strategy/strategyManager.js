import { strategyGrid } from '@sudoku/stores';
import { SUDOKU_SIZE } from '@sudoku/constants';

function CreateStrategyManager() {
  const strategiesSet = [];


  return {
    addNewStrategy: (strategy, priority) => {
      strategiesSet.push({strategy, priority});
      strategiesSet.sort(priority);
    },

    determineEffectiveStrategy: (grid, effectiveStrategies, strategyApplyCell) => {
      let hasChange = false;
      for (const { strategy, _ } in strategiesSet) {
        if (strategy.preCondition(grid)) {
          effectiveStrategies.add(strategy);
          strategy.apply(grid, strategyApplyCell);
          hasChange = true;
        }
      }

      return hasChange;
    },

    apply: (grid) => {
      grid.inceaseTimeStep();
      const effectiveStrategies = new Set();
      const strategyApplyCell = new Map();
      while (determineEffectiveStrategy(grid, effectiveStrategies, strategyApplyCell)) {}

      strategyApplyCell.forEach((strategies, pos) => grid.add(pos, strategies))
      return effectiveStrategies;
    }
  }
}

export const strategyManager = CreateStrategyManager();